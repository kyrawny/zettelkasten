<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3.-Literature-Notes on</title><link>https://kyrawny.github.io/3.-literature-notes/</link><description>Recent content in 3.-Literature-Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kyrawny.github.io/3.-literature-notes/index.xml" rel="self" type="application/rss+xml"/><item><title>8 Chess Concepts Every Chess Player Should Know - Chess Principles, Ideas, Strategies and Tips</title><link>https://kyrawny.github.io/3.-Literature-Notes/chessvibesChessConceptsEvery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kyrawny.github.io/3.-Literature-Notes/chessvibesChessConceptsEvery/</guid><description>Contexts Chess | [[]]
8 Chess Concepts Every Chess Player Should Know - Chess Principles, Ideas, Strategies and Tips This video covers 8 more crucial chess principles that are vital for every chess player to understand, from beginner to master. I talk about King Pawn Openings, Queen Pawn Openings, Endings, and Middlegame Strategy. Each of these chess concepts are clearly explained with a relevant example. You will win more games, and improve as a chess player, if you practice these chess ideas and strategies.</description></item><item><title>Comparing Loihi with a SpiNNaker 2 Prototype on Low-Latency Keyword Spotting and Adaptive Robotic Control</title><link>https://kyrawny.github.io/3.-Literature-Notes/yanComparingLoihiSpiNNaker2021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kyrawny.github.io/3.-Literature-Notes/yanComparingLoihiSpiNNaker2021/</guid><description>Contexts Neuromorphic Computing | Speech Processing | Robotic Control | Deep Neural Networks | Spiking Neural Networks | Artificial Intelligence | Machine Learning | Computing Hardware
Comparing Loihi with a SpiNNaker 2 Prototype on Low-Latency Keyword Spotting and Adaptive Robotic Control We implemented two neural network based benchmark tasks on a prototype chip of the second-generation SpiNNaker (SpiNNaker 2) neuromorphic system: keyword spotting and adaptive robotic control. Keyword spotting is commonly used in smart speakers to listen for wake words, and adaptive control is used in robotic applications to adapt to unknown dynamics in an online fashion.</description></item><item><title>Nengo: A Python tool for building large-scale functional brain models</title><link>https://kyrawny.github.io/3.-Literature-Notes/bekolayNengoPythonTool2014/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kyrawny.github.io/3.-Literature-Notes/bekolayNengoPythonTool2014/</guid><description>Contexts Python | Neuromorphic Computing | Neuroscience | Control Theory | Neural Engineering
Nengo: A Python tool for building large-scale functional brain models Neuroscience currently lacks a comprehensive theory of how cognitive processes can be implemented in a biological substrate. The Neural Engineering Framework (NEF) proposes one such theory, but has not yet gathered significant empirical support, partly due to the technical challenge of building and simulating large-scale models with the NEF.</description></item></channel></rss>